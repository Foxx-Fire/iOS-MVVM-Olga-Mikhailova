//
//  Theory.swift
//  iOS-MVVM-Olga Mikhailova
//
//  Created by FoxxFire on 23.09.2025.
//


/*
 Зависимости в MVVM (кто о ком знает)
 Правильная архитектура:
 
 View (ViewController) знает:
 Знает о ViewModel (через протокол)
 Знает о моделях данных для отображения
 НЕ знает детали реализации ViewModel
 
 ViewModel знает:
 Знает о Model (Service, данные)
 Знает как преобразовывать данные для View
 НЕ знает о View (не знает что такое UIKit, UIViewController)
 НЕ знает детали реализации View и НЕ должен создавать UI компоненты
 
 Model (Service) знает:
 Знает только о своих данных
 НЕ знает о ViewModel
 НЕ знает о View
 НЕ знает как данные будут использоваться
 
 ViewController = "Я знаю что есть ViewModel который дает мне данные, и я знаю как их показать на экране"
 
 ViewModel = "Я знаю где взять данные и как их подготовить для показа, но я не знаю и не хочу знать как они будут выглядеть на экране"
 
 Model = "Я просто храню данные, не знаю кто и как их будет использовать"
 
 Аналогия из жизни:
 ViewController = Официант в ресторане
 
 Знает о клиенте (ViewModel)
 
 Знает как подать блюдо (данные)
 
 Не знает как повар готовил
 
 ViewModel = Повар на кухне
 
 Знает о продуктах (Model)
 
 Знает как приготовить блюдо
 
 Не знает как официант подаст
 
 Model = Продукты в холодильнике
 
 Просто лежат и ждут
 
 Не знают кто их будет готовить и подавать
 */


/*
 1. Что такое import Combine?
 Combine - это фреймворк от Apple для работы с асинхронными событиями и потоками данных.
 
  Без Combine - как телефонный звонок:
  - Звоним
  - Ждем ответа
  - Получаем ответ
  - Разговор закончен
 
  С Combine - как радиостанция:
  - Настраиваемся на волну
  - Постоянно слушаем
  - Получаем музыку когда она играет
  - Можем слушать сколько угодно
 
 Основные компоненты:
 Publisher (Издатель) - радиостанция
 Говорит: "У меня есть данные, подписывайтесь!"
 @Published var name: String = "Ольга"
 @Published - это как "волшебное слово" для переменной
 Оно автоматически делает переменную "издателем" (Publisher) 
 Когда значение меняется - все подписчики узнают об этом
 Что такое @Published?
 Это "декоратор" который делает свойство "издателем"
 Когда значение меняется, все подписчики автоматически уведомляются
 Вместо ручного didSet в Observable
 
 Subscriber (Подписчик) - радиоприемник
 // Говорит: "Я хочу слушать твои данные!"
 .sink { value in
 print("Получил: \(value)")
 }
 
 Что такое cancellables?
 Это "корзина" для хранения подписок Combine
 Нужна чтобы подписки не уничтожались сразу после создания 
 Без нее подписки бы сразу отменялись
 
 ObservableObject - специальный протокол для Combine, который говорит "этот объект может издавать события"
 
 Что такое viewModel.$sections?
 sections - сам массив данных
 $sections - Publisher этого массива (можно подписаться на изменения)
 
 Что такое .receive(on: DispatchQueue.main)?
 Гарантирует что код внутри .sink выполнится на главном потоке
 Важно потому что reloadData() должен вызываться только из главного потока
 Без этого мог бы быть краш при обновлении UI из фонового потока
 
 Что такое .sink?
 Метод для подписки на Publisher
 Выполняет переданный код каждый раз когда данные меняются
 [weak self] - предотвращает утечки памяти
 
 Что такое .store(in: &cancellables)?
 Сохраняет подписку в нашем "хранилище"
 Без этого подписка сразу отменилась бы
 cancellables хранит все активные подписки
 
 */
